# Generated by Django 4.1.7 on 2023-02-20 10:23

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('date_joined', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=False)),
                ('staff', models.BooleanField(default=False)),
                ('admin', models.BooleanField(default=False)),
                ('superuser', models.BooleanField(default=False)),
                ('twitter', models.CharField(blank=True, max_length=150, null=True, verbose_name='twitter')),
                ('instagram', models.CharField(blank=True, max_length=150, null=True, verbose_name='instagram')),
                ('facebook', models.CharField(blank=True, max_length=150, null=True, verbose_name='facebook')),
                ('linkedin', models.CharField(blank=True, max_length=150, null=True, verbose_name='linkein')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('customuser_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('company_name', models.CharField(max_length=100, verbose_name='company_name')),
                ('company_image', models.CharField(max_length=200, verbose_name='company_image')),
                ('website', models.CharField(blank=True, max_length=150, null=True, verbose_name='website')),
            ],
            options={
                'abstract': False,
            },
            bases=('user.customuser',),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('customuser_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('full_name', models.CharField(max_length=100, verbose_name='full_name')),
                ('photo', models.CharField(max_length=200, verbose_name='photo')),
                ('skills', models.CharField(blank=True, max_length=200, null=True, verbose_name='skills')),
                ('education', models.JSONField(blank=True, null=True, verbose_name='education')),
                ('experience', models.JSONField(blank=True, null=True, verbose_name='experience')),
                ('blogs', models.JSONField(blank=True, null=True, verbose_name='blogs')),
                ('tool', models.CharField(max_length=200, verbose_name='tools')),
                ('location', models.CharField(max_length=100, verbose_name='location')),
                ('pay_range', models.CharField(max_length=100, verbose_name='pay_range')),
            ],
            options={
                'abstract': False,
            },
            bases=('user.customuser',),
        ),
    ]
